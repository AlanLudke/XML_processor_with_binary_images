{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 9;}
{\s50\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext51 List Continue 0;}
{\s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext52 List Continue 1;}
{\s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext53 List Continue 2;}
{\s53\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext54 List Continue 3;}
{\s54\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext55 List Continue 4;}
{\s55\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext56 List Continue 5;}
{\s56\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext57 List Continue 6;}
{\s57\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext58 List Continue 7;}
{\s58\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext59 List Continue 8;}
{\s59\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext59 List Continue 9;}
{\s60\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext61 DescContinue 0;}
{\s61\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext62 DescContinue 1;}
{\s62\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext63 DescContinue 2;}
{\s63\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext64 DescContinue 3;}
{\s64\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext65 DescContinue 4;}
{\s65\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext66 DescContinue 5;}
{\s66\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext67 DescContinue 6;}
{\s67\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext68 DescContinue 7;}
{\s68\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext69 DescContinue 8;}
{\s69\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext69 DescContinue 9;}
{\s70\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext81 LatexTOC 0;}
{\s71\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext82 LatexTOC 1;}
{\s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext83 LatexTOC 2;}
{\s73\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext84 LatexTOC 3;}
{\s74\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext85 LatexTOC 4;}
{\s75\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext86 LatexTOC 5;}
{\s76\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext87 LatexTOC 6;}
{\s77\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext88 LatexTOC 7;}
{\s78\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext89 LatexTOC 8;}
{\s79\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext89 LatexTOC 9;}
{\s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext81 \sautoupd List Bullet 0;}
{\s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid \sbasedon0 \snext82 \sautoupd List Bullet 1;}
{\s82\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls3\adjustright \fs20\cgrid \sbasedon0 \snext83 \sautoupd List Bullet 2;}
{\s83\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls4\adjustright \fs20\cgrid \sbasedon0 \snext84 \sautoupd List Bullet 3;}
{\s84\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls5\adjustright \fs20\cgrid \sbasedon0 \snext85 \sautoupd List Bullet 4;}
{\s85\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls6\adjustright \fs20\cgrid \sbasedon0 \snext86 \sautoupd List Bullet 5;}
{\s86\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls7\adjustright \fs20\cgrid \sbasedon0 \snext87 \sautoupd List Bullet 6;}
{\s87\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls8\adjustright \fs20\cgrid \sbasedon0 \snext88 \sautoupd List Bullet 7;}
{\s88\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls9\adjustright \fs20\cgrid \sbasedon0 \snext89 \sautoupd List Bullet 8;}
{\s89\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls10\adjustright \fs20\cgrid \sbasedon0 \snext89 \sautoupd List Bullet 9;}
{\s90\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext91 \sautoupd List Enum 0;}
{\s91\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext92 \sautoupd List Enum 1;}
{\s92\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext93 \sautoupd List Enum 2;}
{\s93\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext94 \sautoupd List Enum 3;}
{\s94\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext95 \sautoupd List Enum 4;}
{\s95\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext96 \sautoupd List Enum 5;}
{\s96\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext96 \sautoupd List Enum 5;}
{\s97\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext98 \sautoupd List Enum 7;}
{\s98\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext99 \sautoupd List Enum 8;}
{\s99\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext99 \sautoupd List Enum 9;}
}
{\info 
{\title {\comment XML_processor_with_binary_images }XML_processor_with_binary_images}
{\comment Gerado por doxygen.}
{\creatim \yr2018\mo10\dy2\hr12\min54\sec33}
}\pard\plain 
\sectd\pgnlcrm
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\vertalc\qc\par\par\par\par\par\par\par
\pard\plain \s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid 
{\field\fldedit {\*\fldinst TITLE \\*MERGEFORMAT}{\fldrslt XML_processor_with_binary_images}}\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\par
\par\par\par\par\par\par\par\par\par\par\par\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
{\field\fldedit {\*\fldinst AUTHOR \\*MERGEFORMAT}{\fldrslt AUTHOR}}\par
Vers\'E3o \par{\field\fldedit {\*\fldinst CREATEDATE \\*MERGEFORMAT}{\fldrslt Ter\'E7a, 2 de Outubro de 2018 }}\par
\page\page\vertalt
\pard\plain 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \'CDndice\par
\pard\plain \par
{\field\fldedit {\*\fldinst TOC \\f \\*MERGEFORMAT}{\fldrslt Table of contents}}\par
\pard\plain 
\sect \sbkpage \pgndec \pgnrestart
\sect \sectd \sbknone
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
XML_processor_with_binary_images.cpp\par \pard\plain 
{\tc \v XML_processor_with_binary_images.cpp}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Autores:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid Alan Djon L\'FCdke & Matheus Schaly \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Vers\'E3o:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 1.0 \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Data:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 02-10-2018\par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Copyright:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid [2018] \par
}}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'CDndice dos namespaces\par \pard\plain 
{\tc \v \'CDndice dos namespaces}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Lista de namespaces\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Lista dos namespaces com uma breve descri\'E7\'E3o:}
{
\par
\pard\plain \s71\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b structures} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'CDndice dos componentes\par \pard\plain 
{\tc \v \'CDndice dos componentes}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Lista de componentes\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Lista de classes, estruturas, uni\'F5es e interfaces com uma breve descri\'E7\'E3o:}
{
\par
\pard\plain \s71\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b structures::LinkedStack< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'CDndice dos ficheiros\par \pard\plain 
{\tc \v \'CDndice dos ficheiros}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Lista de ficheiros\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Lista de todos os ficheiros com uma breve descri\'E7\'E3o:}
{
\par
\pard\plain \s71\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b XML_processor_with_binary_images.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Documenta\'E7\'E3o dos namespaces\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia ao namespace structures\par \pard\plain 
{\tc\tcl2 \v structures}
{\xe \v structures}
{\bkmkstart AAAAAAAAAO}
{\bkmkend AAAAAAAAAO}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Componentes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b LinkedStack}\par
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Documenta\'E7\'E3o da classe{\tc \v Documenta\'E7\'E3o da classe}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia \'E0 classe Template structures::LinkedStack< T >\par \pard\plain 
{\tc\tcl2 \v structures::LinkedStack< T >}
{\xe \v structures::LinkedStack< T >}
{\bkmkstart AAAAAAAAAP}
{\bkmkend AAAAAAAAAP}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros p\'FAblicos\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b LinkedStack} ()\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constructor method;. }{
}\par
}\par}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~LinkedStack} ()\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Destructor method);. }{
}\par
}\par}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b clear} ()\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Wipes the list. }{
}\par
}\par}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b push} (const T &data)\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Inserts an element in the stack. }{
}\par
}\par}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
T {\b pop} ()\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Removes an element. }{
}\par
}\par}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
T & {\b top} () const\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns the first element. }{
}\par
}\par}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b empty} () const\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns true if empty and false otherwise. }{
}\par
}\par}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::size_t {\b size} () const\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns the size of the stack. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descri\'E7\'E3o detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
template<typename T>\par
class structures::LinkedStack< T >\par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Linked Stack class \par
}{
Definido na linha {\b 29} do ficheiro {\b XML_processor_with_binary_images.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos Construtores & Destrutor\par
\pard\plain 
{\xe \v LinkedStack\:structures::LinkedStack}
{\xe \v structures::LinkedStack\:LinkedStack}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > {\b structures::LinkedStack}< T >::{\b LinkedStack} ()}}
\par
{\bkmkstart AAAAAAAAAQ}
{\bkmkend AAAAAAAAAQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constructor method;. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constructor method. \par
}{
Definido na linha {\b 128} do ficheiro {\b XML_processor_with_binary_images.cpp}.}\par
}
{\xe \v ~LinkedStack\:structures::LinkedStack}
{\xe \v structures::LinkedStack\:~LinkedStack}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > {\b structures::LinkedStack}< T >::~{\b LinkedStack} ()}}
\par
{\bkmkstart AAAAAAAAAR}
{\bkmkend AAAAAAAAAR}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Destructor method);. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Destructor method. \par
}{
Definido na linha {\b 135} do ficheiro {\b XML_processor_with_binary_images.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos m\'E9todos\par
\pard\plain 
{\xe \v clear\:structures::LinkedStack}
{\xe \v structures::LinkedStack\:clear}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > void {\b structures::LinkedStack}< T >::clear ()}}
\par
{\bkmkstart AAAAAAAAAS}
{\bkmkend AAAAAAAAAS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Wipes the list. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Wipe the list. \par
}{
Definido na linha {\b 141} do ficheiro {\b XML_processor_with_binary_images.cpp}.}\par
}
{\xe \v empty\:structures::LinkedStack}
{\xe \v structures::LinkedStack\:empty}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > bool {\b structures::LinkedStack}< T >::empty () const}}
\par
{\bkmkstart AAAAAAAAAT}
{\bkmkend AAAAAAAAAT}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns true if empty and false otherwise. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid true if empty \par
}}{
Definido na linha {\b 205} do ficheiro {\b XML_processor_with_binary_images.cpp}.}\par
}
{\xe \v pop\:structures::LinkedStack}
{\xe \v structures::LinkedStack\:pop}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > T {\b structures::LinkedStack}< T >::pop ()}}
\par
{\bkmkstart AAAAAAAAAU}
{\bkmkend AAAAAAAAAU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Removes an element. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns the first element.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid the data inside the removed element \par
}}{
Definido na linha {\b 172} do ficheiro {\b XML_processor_with_binary_images.cpp}.}\par
}
{\xe \v push\:structures::LinkedStack}
{\xe \v structures::LinkedStack\:push}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > void {\b structures::LinkedStack}< T >::push (const T &  {\i data})}}
\par
{\bkmkstart AAAAAAAAAV}
{\bkmkend AAAAAAAAAV}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Inserts an element in the stack. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i data} \cell }{data to be inserted \cell }
{\row }
}
}{
Definido na linha {\b 152} do ficheiro {\b XML_processor_with_binary_images.cpp}.}\par
}
{\xe \v size\:structures::LinkedStack}
{\xe \v structures::LinkedStack\:size}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > std::size_t {\b structures::LinkedStack}< T >::size () const}}
\par
{\bkmkstart AAAAAAAAAW}
{\bkmkend AAAAAAAAAW}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns the size of the stack. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid stack's current size \par
}}{
Definido na linha {\b 218} do ficheiro {\b XML_processor_with_binary_images.cpp}.}\par
}
{\xe \v top\:structures::LinkedStack}
{\xe \v structures::LinkedStack\:top}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > T & {\b structures::LinkedStack}< T >::top () const}}
\par
{\bkmkstart AAAAAAAAAX}
{\bkmkend AAAAAAAAAX}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns the first element. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Removes an element.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid the data of the node at the stack's top \par
}}{
Definido na linha {\b 193} do ficheiro {\b XML_processor_with_binary_images.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para esta classe foi gerada a partir do seguinte ficheiro:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
{\b XML_processor_with_binary_images.cpp}\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Documenta\'E7\'E3o do ficheiro{\tc \v Documenta\'E7\'E3o do ficheiro}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia ao ficheiro XML_processor_with_binary_images.cpp\par \pard\plain 
{\tc\tcl2 \v XML_processor_with_binary_images.cpp}
{\xe \v XML_processor_with_binary_images.cpp}
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <iostream>}\par
{\f2 #include <fstream>}\par
{\f2 #include <string>}\par
{\f2 #include <stdexcept>}\par
{\f2 #include <stdlib.h>}\par
{\f2 #include <stdio.h>}\par
{\f2 #include <string.h>}\par
{\f2 #include <sstream>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Diagrama de depend\'EAncias de inclus\'E3o para XML_processor_with_binary_images.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_x_m_l__processor__with__binary__images_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Componentes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b structures::LinkedStack< T >}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
 {\b structures}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b STRUCTURES_XML_PROCESSOR}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b getFile} (string filename)\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Gets a file by name. }{
}\par
}\par}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b getTag} (string line, int pos)\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Gets a complete tag. }{
}\par
}\par}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b getImgTagCount} (string xmlfilename)\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Counts how many "imgs" tags there are. }{
}\par
}\par}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b getImage} (string xmlfilename, size_t index)\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Gets the complete image, containing tags and the binary data. }{
}\par
}\par}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b getName} (string image)\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Gets the name of the image. }{
}\par
}\par}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b getHeight} (string image)\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Gets the binary image height. }{
}\par
}\par}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b getWidth} (string image)\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Gets the binary image width. }{
}\par
}\par}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b getData} (string image)\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Gets the binary image data. }{
}\par
}\par}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b doFirstPart} (string xmlfilename, size_t lines)\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Checks if all the tags are correctly formatted. }{
}\par
}\par}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b print_array} (string image)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b doSecondPart} (string xmlfilename, string image)\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Counts how many blocks of 1's there are. }{
}\par
}\par}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das macros\par
\pard\plain 
{\xe \v STRUCTURES_XML_PROCESSOR\:XML_processor_with_binary_images.cpp}
{\xe \v XML_processor_with_binary_images.cpp\:STRUCTURES_XML_PROCESSOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define STRUCTURES_XML_PROCESSOR}}
\par
{\bkmkstart AAAAAAAAAB}
{\bkmkend AAAAAAAAAB}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definido na linha {\b 12} do ficheiro {\b XML_processor_with_binary_images.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v doFirstPart\:XML_processor_with_binary_images.cpp}
{\xe \v XML_processor_with_binary_images.cpp\:doFirstPart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doFirstPart (string  {\i xmlfilename}, size_t  {\i lines})}}
\par
{\bkmkstart AAAAAAAAAC}
{\bkmkend AAAAAAAAAC}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Checks if all the tags are correctly formatted. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns false and prints error if: 1 - A tag is openned but not closed 2 - A tag is openned but the last tag in the stack is not the openned tag 3 - The file ends and there is still some tag in the stack {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i xmlfilename} \cell }{the name of the file \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{the line where the the procedure should start \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid true if there was an error, false otherwise \par
}}{
Definido na linha {\b 438} do ficheiro {\b XML_processor_with_binary_images.cpp}.}\par
}
{\xe \v doSecondPart\:XML_processor_with_binary_images.cpp}
{\xe \v XML_processor_with_binary_images.cpp\:doSecondPart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t doSecondPart (string  {\i xmlfilename}, string  {\i image})}}
\par
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Counts how many blocks of 1's there are. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Goes through the list, element by element, from left to right until a neighbour of such element is a 1. When the number 1 is found, it checks all the other neighbours and add them to the stack, giving them a label. It does it continously, until all the image is visited. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i xmlfilename} \cell }{the name of the file \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i image} \cell }{the image containing the tags and the binary data \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid the number of clusters of numbers 1 \par
}}{
Definido na linha {\b 511} do ficheiro {\b XML_processor_with_binary_images.cpp}.}\par
}
{\xe \v getData\:XML_processor_with_binary_images.cpp}
{\xe \v XML_processor_with_binary_images.cpp\:getData}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string getData (string  {\i image})}}
\par
{\bkmkstart AAAAAAAAAE}
{\bkmkend AAAAAAAAAE}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Gets the binary image data. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i image} \cell }{the image where the data will be extracted \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid the image's binary data \par
}}{
Definido na linha {\b 411} do ficheiro {\b XML_processor_with_binary_images.cpp}.}\par
}
{\xe \v getFile\:XML_processor_with_binary_images.cpp}
{\xe \v XML_processor_with_binary_images.cpp\:getFile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string getFile (string  {\i filename})}}
\par
{\bkmkstart AAAAAAAAAF}
{\bkmkend AAAAAAAAAF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Gets a file by name. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i filename} \cell }{the filename to return \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid filename as a string \par
}}{
Definido na linha {\b 227} do ficheiro {\b XML_processor_with_binary_images.cpp}.}\par
}
{\xe \v getHeight\:XML_processor_with_binary_images.cpp}
{\xe \v XML_processor_with_binary_images.cpp\:getHeight}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t getHeight (string  {\i image})}}
\par
{\bkmkstart AAAAAAAAAG}
{\bkmkend AAAAAAAAAG}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Gets the binary image height. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i image} \cell }{the image to be measured \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid the image's height \par
}}{
Definido na linha {\b 359} do ficheiro {\b XML_processor_with_binary_images.cpp}.}\par
}
{\xe \v getImage\:XML_processor_with_binary_images.cpp}
{\xe \v XML_processor_with_binary_images.cpp\:getImage}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string getImage (string  {\i xmlfilename}, size_t  {\i index})}}
\par
{\bkmkstart AAAAAAAAAH}
{\bkmkend AAAAAAAAAH}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Gets the complete image, containing tags and the binary data. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i xmlfilename} \cell }{the file's name \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i index} \cell }{the image's index \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid the image as a string \par
}}{
Definido na linha {\b 303} do ficheiro {\b XML_processor_with_binary_images.cpp}.}\par
}
{\xe \v getImgTagCount\:XML_processor_with_binary_images.cpp}
{\xe \v XML_processor_with_binary_images.cpp\:getImgTagCount}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t getImgTagCount (string  {\i xmlfilename})}}
\par
{\bkmkstart AAAAAAAAAI}
{\bkmkend AAAAAAAAAI}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Counts how many "imgs" tags there are. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i xmlfilename} \cell }{the document's filename \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid quantity of tags in the file \par
}}{
Definido na linha {\b 271} do ficheiro {\b XML_processor_with_binary_images.cpp}.}\par
}
{\xe \v getName\:XML_processor_with_binary_images.cpp}
{\xe \v XML_processor_with_binary_images.cpp\:getName}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string getName (string  {\i image})}}
\par
{\bkmkstart AAAAAAAAAJ}
{\bkmkend AAAAAAAAAJ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Gets the name of the image. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i image} \cell }{the image that contains the name \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid the image's name \par
}}{
Definido na linha {\b 336} do ficheiro {\b XML_processor_with_binary_images.cpp}.}\par
}
{\xe \v getTag\:XML_processor_with_binary_images.cpp}
{\xe \v XML_processor_with_binary_images.cpp\:getTag}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string getTag (string  {\i line}, int  {\i pos})}}
\par
{\bkmkstart AAAAAAAAAK}
{\bkmkend AAAAAAAAAK}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Gets a complete tag. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i line} \cell }{the tag's line \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i pos} \cell }{the tag's index \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid the tag found \par
}}{
Definido na linha {\b 250} do ficheiro {\b XML_processor_with_binary_images.cpp}.}\par
}
{\xe \v getWidth\:XML_processor_with_binary_images.cpp}
{\xe \v XML_processor_with_binary_images.cpp\:getWidth}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t getWidth (string  {\i image})}}
\par
{\bkmkstart AAAAAAAAAL}
{\bkmkend AAAAAAAAAL}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Gets the binary image width. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i image} \cell }{the image to be measured \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid the image's width \par
}}{
Definido na linha {\b 385} do ficheiro {\b XML_processor_with_binary_images.cpp}.}\par
}
{\xe \v main\:XML_processor_with_binary_images.cpp}
{\xe \v XML_processor_with_binary_images.cpp\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main ()}}
\par
{\bkmkstart AAAAAAAAAM}
{\bkmkend AAAAAAAAAM}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definido na linha {\b 606} do ficheiro {\b XML_processor_with_binary_images.cpp}.}\par
}
{\xe \v print_array\:XML_processor_with_binary_images.cpp}
{\xe \v XML_processor_with_binary_images.cpp\:print_array}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void print_array (string  {\i image})}}
\par
{\bkmkstart AAAAAAAAAN}
{\bkmkend AAAAAAAAAN}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definido na linha {\b 485} do ficheiro {\b XML_processor_with_binary_images.cpp}.}\par
}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
XML_processor_with_binary_images.cpp\par \pard\plain 
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     1 \par
   11 {\cf21 #ifndef STRUCTURES_XML_PROCESSOR}\par
   12 {\cf21 #define STRUCTURES_XML_PROCESSOR}\par
   13 \par
   14 {\cf21 #include <iostream>}\par
   15 {\cf21 #include <fstream>}\par
   16 {\cf21 #include <string>}\par
   17 {\cf21 #include <stdexcept>}\par
   18 {\cf21 #include <stdlib.h>}\par
   19 {\cf21 #include <stdio.h>}\par
   20 {\cf21 #include <string.h>}\par
   21 {\cf21 #include <sstream>}\par
   22 \par
   23 {\cf17 using namespace }std;\par
   24 \par
   25 {\cf17 namespace }structures \{\par
   26 \par
   28 {\cf17 template}<{\cf17 typename} T>\par
   29 {\cf17 class }LinkedStack \{\par
   30  {\cf17 public}:\par
   32     LinkedStack();\par
   34     ~LinkedStack();\par
   36     {\cf18 void} clear();\par
   38     {\cf18 void} push({\cf17 const} T& data);\par
   40     T pop();\par
   42     T& top() {\cf17 const};\par
   44     {\cf18 bool} empty() {\cf17 const};\par
   46     std::size_t size() {\cf17 const};\par
   47 \par
   48  {\cf17 private}:\par
   50     {\cf17 class }Node \{\par
   51      {\cf17 public}:\par
   53 \par
   56         {\cf17 explicit} Node({\cf17 const} T& data):\par
   57             data_\{data\}\par
   58         \{\}\par
   59 \par
   60 \par
   62 \par
   66         Node({\cf17 const} T& data, Node* next):\par
   67             data_\{data\},\par
   68             next_\{next\}\par
   69         \{\}\par
   70 \par
   72 \par
   75         T& data() \{\par
   76             {\cf19 return} data_;\par
   77         \}\par
   78 \par
   80 \par
   83         {\cf17 const} T& data(){\cf17  const }\{\par
   84             {\cf19 return} data_;\par
   85         \}\par
   86 \par
   88 \par
   91         Node* next() \{\par
   92             {\cf19 return} next_;\par
   93         \}\par
   94 \par
   96 \par
   99         {\cf17 const} Node* next(){\cf17  const }\{\par
  100             {\cf19 return} next_;\par
  101         \}\par
  102 \par
  104 \par
  107         {\cf18 void} next(Node* node) \{\par
  108             next_ = node;\par
  109         \}\par
  110 \par
  111      {\cf17 private}:\par
  113         T data_;\par
  115         Node* next_;\par
  116     \};\par
  117 \par
  119     Node* top_;\par
  121     std::size_t size_;\par
  122 \};\par
  123 \par
  124 \}  {\cf20 // namespace structures}\par
  125 \par
  127 {\cf17 template}<{\cf17 typename} T>\par
  128 structures::LinkedStack<T>::LinkedStack() \{\par
  129     top_ = {\cf17 nullptr};\par
  130     size_ = 0;\par
  131 \}\par
  132 \par
  134 {\cf17 template}<{\cf17 typename} T>\par
  135 structures::LinkedStack<T>::~LinkedStack() \{\par
  136   clear();\par
  137 \}\par
  138 \par
  140 {\cf17 template}<{\cf17 typename} T>\par
  141 {\cf18 void} structures::LinkedStack<T>::clear() \{\par
  142     {\cf19 while} (!empty()) \{\par
  143         pop();\par
  144     \}\par
  145 \}\par
  146 \par
  148 \par
  151 {\cf17 template}<{\cf17 typename} T>\par
  152 {\cf18 void} structures::LinkedStack<T>::push({\cf17 const} T& data) \{\par
  153   Node *novo = {\cf17 new} Node(data);\par
  154   {\cf19 if} (novo == {\cf17 nullptr}) \{\par
  155     {\cf19 throw} std::out_of_range({\cf22 "Nodo n\'E3o alocado!"});\par
  156   \} {\cf19 else} \{\par
  157     {\cf19 if} (size_ == 0) \{\par
  158       top_ = novo;\par
  159     \} {\cf19 else} \{\par
  160       novo->next(top_);\par
  161       top_ = novo;\par
  162     \}\par
  163     size_++;\par
  164   \}\par
  165 \}\par
  166 \par
  168 \par
  171 {\cf17 template}<{\cf17 typename} T>\par
  172 T structures::LinkedStack<T>::pop() \{\par
  173   Node *saiu;\par
  174   T volta;\par
  175 \par
  176   {\cf19 if} (empty()) \{\par
  177     {\cf19 throw} std::out_of_range({\cf22 "Lista vazia, n\'E3o \'E9 possivel retirar!"});\par
  178   \} {\cf19 else} \{\par
  179     saiu = top_;\par
  180     volta = saiu->data();\par
  181     top_ = saiu->next();\par
  182     size_ = size_ - 1;\par
  183     {\cf17 delete} saiu;\par
  184     {\cf19 return} volta;\par
  185   \}\par
  186 \}\par
  187 \par
  189 \par
  192 {\cf17 template}<{\cf17 typename} T>\par
  193 T& structures::LinkedStack<T>::top(){\cf17  const }\{\par
  194     {\cf19 if} (empty()) \{\par
  195         {\cf19 throw} std::out_of_range({\cf22 "Lista vazia, metodo top()"});\par
  196     \}\par
  197     {\cf19 return} top_->data();\par
  198 \}\par
  199 \par
  201 \par
  204 {\cf17 template}<{\cf17 typename} T>\par
  205 {\cf18 bool} structures::LinkedStack<T>::empty(){\cf17  const }\{\par
  206   {\cf19 if} (size_ == 0) \{\par
  207     {\cf19 return} {\cf17 true};\par
  208   \} {\cf19 else} \{\par
  209     {\cf19 return} {\cf17 false};\par
  210   \}\par
  211 \}\par
  212 \par
  214 \par
  217 {\cf17 template}<{\cf17 typename} T>\par
  218 std::size_t structures::LinkedStack<T>::size(){\cf17  const }\{\par
  219     {\cf19 return} size_;\par
  220 \}\par
  221 \par
  223 \par
  227 {\cf18 string} getFile({\cf18 string} filename) \{\par
  228   {\cf18 string} buffer;\par
  229   {\cf18 char} c;\par
  230 \par
  231   ifstream in(filename);\par
  232   {\cf19 if} (!in) \{\par
  233      cout << filename << {\cf22 "not found"};\par
  234      exit(1);\par
  235   \}\par
  236   {\cf19 while} (in.get(c)) buffer += c;\par
  237   in.close();\par
  238 \par
  239   {\cf19 return} buffer;\par
  240 \}\par
  241 \par
  242 {\cf21 #endif}\par
  243 \par
  245 \par
  250 {\cf18 string} getTag({\cf18 string} line, {\cf18 int} pos) \{\par
  251     {\cf18 bool} closed_bracket = {\cf17 false};  {\cf20 // >}\par
  252     {\cf18 bool} close_tag = {\cf17 false};  {\cf20 // /}\par
  253 \par
  254     {\cf18 string} tag = {\cf22 ""};\par
  255     {\cf18 size_t} caracter = pos;\par
  256     {\cf19 while} (closed_bracket == {\cf17 false}) \{\par
  257         {\cf19 if}(line[caracter] == {\cf23 '>'}) \{\par
  258             closed_bracket = {\cf17 true};\par
  259         \}\par
  260         tag += line[caracter];\par
  261         caracter++;\par
  262     \}\par
  263     {\cf19 return} tag;\par
  264 \}\par
  265 \par
  267 \par
  271 {\cf18 size_t} getImgTagCount({\cf18 string} xmlfilename) \{\par
  272   {\cf20 // First Part:}\par
  273   ifstream inFile;\par
  274   inFile.open(xmlfilename);\par
  275 \par
  276   {\cf18 string} tag = {\cf22 ""};\par
  277   {\cf18 string} line = {\cf22 ""};\par
  278   {\cf18 size_t} img_tag_counter = 0;\par
  279 \par
  280   {\cf19 while} (inFile) \{ {\cf20 // While file still have lines to read}\par
  281     inFile >> line;\par
  282     {\cf19 for} ({\cf18 size_t} caracter = 0; caracter < line.length(); caracter++) \{\par
  283       {\cf19 if} (line[caracter] == {\cf23 '<'}) \{\par
  284         tag = getTag(line, caracter);\par
  285         {\cf19 if} (tag.compare({\cf22 "<img>"}) == 0) \{\par
  286           img_tag_counter++;\par
  287         \}\par
  288       \}\par
  289     \}\par
  290   \}\par
  291 \par
  292   inFile.close();\par
  293   inFile.clear();\par
  294   {\cf19 return} img_tag_counter;\par
  295 \}\par
  296 \par
  298 \par
  303 {\cf18 string} getImage({\cf18 string} xmlfilename, {\cf18 size_t} index) \{\par
  304     ifstream inFile;\par
  305     inFile.open(xmlfilename);\par
  306 \par
  307     {\cf18 string} tag = {\cf22 ""};\par
  308     {\cf18 string} image = {\cf22 "<"};\par
  309     {\cf18 string} line = {\cf22 ""};\par
  310     {\cf18 size_t} imgsFounded = 0;\par
  311 \par
  312     {\cf19 while} (inFile) \{\par
  313       inFile >> line;\par
  314       {\cf19 for} ({\cf18 size_t} caracter = 0; caracter < line.length(); caracter++) \{\par
  315         {\cf19 if} (imgsFounded==index && tag.compare({\cf22 "</img>"}) != 0) \{\par
  316             image += line[caracter];\par
  317         \}\par
  318         {\cf19 if} (line[caracter] == {\cf23 '<'}) \{\par
  319           tag = getTag(line, caracter);;\par
  320           {\cf19 if} (tag.compare({\cf22 "<img>"}) == 0) \{\par
  321             imgsFounded++;\par
  322           \}\par
  323         \}\par
  324       \}\par
  325     \}\par
  326     inFile.close();\par
  327     inFile.clear();\par
  328     {\cf19 return} image+{\cf22 "/img>"};\par
  329 \}\par
  330 \par
  332 \par
  336 {\cf18 string} getName({\cf18 string} image) \{\par
  337 \par
  338     {\cf18 string} image_name = {\cf22 ""};\par
  339 \par
  340     {\cf19 for} ({\cf18 int} caracter = 0; caracter < image.length(); caracter++) \{\par
  341       {\cf19 if} (image[caracter] == {\cf23 '<'})\{\par
  342         {\cf19 if} (getTag(image, caracter).compare({\cf22 "<name>"}) == 0) \{\par
  343           caracter += 6;\par
  344           {\cf19 while} (image[caracter] != {\cf23 '<'}) \{\par
  345             image_name += image[caracter];\par
  346             caracter++;\par
  347           \}\par
  348         \}\par
  349       \}\par
  350     \}\par
  351     {\cf19 return} image_name;\par
  352 \}\par
  353 \par
  355 \par
  359 {\cf18 size_t} getHeight({\cf18 string} image) \{\par
  360 \par
  361   {\cf18 string} string_height = {\cf22 ""};\par
  362   {\cf18 size_t} image_height;\par
  363 \par
  364   {\cf19 for} ({\cf18 int} caracter = 0; caracter < image.length(); caracter++) \{\par
  365     {\cf19 if} (image[caracter] == {\cf23 '<'})\{\par
  366       {\cf19 if} (getTag(image, caracter).compare({\cf22 "<height>"}) == 0) \{\par
  367         caracter += 8;\par
  368         {\cf19 while} (image[caracter] != {\cf23 '<'}) \{\par
  369           string_height += image[caracter];\par
  370           caracter ++;\par
  371         \}\par
  372         stringstream sstream(string_height); {\cf20 // Converts string to size_t}\par
  373         sstream >> image_height;\par
  374       \}\par
  375     \}\par
  376   \}\par
  377   {\cf19 return} image_height;\par
  378 \}\par
  379 \par
  381 \par
  385 {\cf18 size_t} getWidth({\cf18 string} image) \{\par
  386 \par
  387   {\cf18 string} string_width = {\cf22 ""};\par
  388   {\cf18 size_t} image_width;\par
  389 \par
  390   {\cf19 for} ({\cf18 int} caracter = 0; caracter < image.length(); caracter++) \{\par
  391     {\cf19 if} (image[caracter] == {\cf23 '<'})\{\par
  392       {\cf19 if} (getTag(image, caracter).compare({\cf22 "<width>"}) == 0) \{\par
  393         caracter += 7;  {\cf20 // To skip the caracters height>}\par
  394         {\cf19 while} (image[caracter] != {\cf23 '<'}) \{\par
  395           string_width += image[caracter];\par
  396           caracter ++;\par
  397         \}\par
  398         stringstream sstream(string_width); {\cf20 // Converts string to size_t}\par
  399         sstream >> image_width;\par
  400       \}\par
  401     \}\par
  402   \}\par
  403   {\cf19 return} image_width;\par
  404 \}\par
  405 \par
  407 \par
  411 {\cf18 string} getData({\cf18 string} image) \{\par
  412 \par
  413     {\cf18 string} image_data = {\cf22 ""};\par
  414     {\cf18 string} data[getHeight(image)][getWidth(image)];\par
  415 \par
  416     {\cf19 for} ({\cf18 int} caracter = 0; caracter < image.length(); caracter++) \{\par
  417       {\cf19 if} (image[caracter] == {\cf23 '<'} && getTag(image, caracter).compare({\cf22 "<data>"}) == 0)\{\par
  418         caracter += 6;  {\cf20 // To skip the caracters name>}\par
  419         {\cf19 while} (image[caracter] != {\cf23 '<'}) \{\par
  420           image_data += image[caracter];\par
  421           caracter++;\par
  422         \}\par
  423       \}\par
  424     \}\par
  425     {\cf19 return} image_data;\par
  426 \}\par
  427 \par
  429 \par
  438 {\cf18 bool} doFirstPart ({\cf18 string} xmlfilename, {\cf18 size_t} lines) \{\par
  439     {\cf20 // First Part:}\par
  440     ifstream inFile;\par
  441     inFile.open(xmlfilename);\par
  442 \par
  443     structures::LinkedStack<string> tag_list;\par
  444     {\cf18 size_t} line_counter = lines;\par
  445     {\cf18 string} tag = {\cf22 ""};\par
  446     {\cf18 string} line = {\cf22 ""};\par
  447 \par
  448     {\cf19 while} (inFile && line_counter > 1) \{\par
  449       inFile >> line;\par
  450       line_counter--;\par
  451       {\cf19 for} ({\cf18 size_t} caracter = 0; caracter < line.length(); caracter++) \{\par
  452         {\cf19 if} (line[caracter] == {\cf23 '<'}) \{\par
  453           tag = getTag(line, caracter);;\par
  454           {\cf19 if} (tag[1] == {\cf23 '/'}) \{\par
  455             {\cf19 if} (tag_list.empty()) \{\par
  456               inFile.close();\par
  457               inFile.clear();\par
  458               {\cf19 return} {\cf17 true};\par
  459             \} {\cf19 else} \{\par
  460               {\cf18 string} temp = tag.erase(1,1);\par
  461               {\cf19 if} (temp.compare(tag_list.top()) == 0) \{\par
  462                   tag_list.pop();\par
  463               \} {\cf19 else} \{\par
  464                   inFile.close();\par
  465                   inFile.clear();\par
  466                   {\cf19 return} {\cf17 true};\par
  467               \}\par
  468             \}\par
  469           \} {\cf19 else} \{\par
  470             tag_list.push(tag);\par
  471           \}\par
  472         \}\par
  473       \}\par
  474     \}\par
  475 \par
  476     {\cf19 if}(!tag_list.empty())\{\par
  477       {\cf19 return} {\cf17 true};\par
  478     \}\par
  479 \par
  480     inFile.close();\par
  481     inFile.clear();\par
  482     {\cf19 return} {\cf17 false};\par
  483 \}\par
  484 \par
  485 {\cf18 void} print_array({\cf18 string} image) \{\par
  486   {\cf18 int} caracter = 0;\par
  487 \par
  488   {\cf18 string} temp[getHeight(image)][getWidth(image)];\par
  489 \par
  490   {\cf19 for} ({\cf18 size_t} i = 0; i < getHeight(image); i++) \{\par
  491     cout<<endl;\par
  492     {\cf19 for} ({\cf18 size_t} j = 0; j < getWidth(image); j++) \{\par
  493       cout<<getData(image)[caracter];\par
  494       caracter++;\par
  495     \}\par
  496   \}\par
  497   cout<<endl<<endl;\par
  498 \}\par
  499 \par
  501 \par
  511 {\cf18 size_t} doSecondPart ({\cf18 string} xmlfilename, {\cf18 string} image) \{\par
  512 \par
  513     {\cf20 // Second Part:}\par
  514     {\cf18 string} image_name = getName(image);\par
  515     {\cf18 size_t} image_height = getHeight(image);\par
  516     {\cf18 size_t} image_width =  getWidth(image);\par
  517     {\cf18 string} image_data = getData(image);\par
  518 \par
  519     structures::LinkedStack<int*> coord_stack;\par
  520 \par
  521     {\cf18 int} dataset[image_height][image_width];\par
  522     {\cf18 int} dataset_temp[image_height][image_width];\par
  523     {\cf18 int} dataset_visited[image_height][image_width];\par
  524     {\cf18 int} index = 0;\par
  525     {\cf18 int} label = 1;\par
  526     {\cf18 int} i_aux = 0;\par
  527     {\cf18 int} j_aux = 0;\par
  528 \par
  529     {\cf19 for} ({\cf18 size_t} i = 0; i < image_height; i++) \{\par
  530         {\cf19 for} ({\cf18 size_t} j = 0; j < image_width; j++) \{\par
  531             dataset_temp[i][j] = 0;\par
  532             dataset_visited[i][j] = 0;\par
  533         \}\par
  534     \}\par
  535 \par
  536 \par
  537     {\cf19 for} ({\cf18 size_t} i = 0; i < image_height; i++) \{\par
  538         {\cf19 for} ({\cf18 size_t} j = 0; j < image_width; j++) \{\par
  539             dataset[i][j] = (int)(image_data[index]) - 48;\par
  540             index++;\par
  541         \}\par
  542     \}\par
  543 \par
  544     {\cf19 for} ({\cf18 size_t} i = 0; i < image_height; i++) \{\par
  545         {\cf19 for} ({\cf18 size_t} j = 0; j < image_width; j++) \{\par
  546             {\cf19 if} (dataset[i][j] == 1 && dataset_visited[i][j] != 1) \{\par
  547                 {\cf18 int} *coord;\par
  548                 coord = {\cf17 new} {\cf18 int}[2];\par
  549                 coord[0] = i;\par
  550                 coord[1] = j;\par
  551                 coord_stack.push(coord);\par
  552                 dataset_visited[i][j] = 1;\par
  553                 dataset_temp[i][j] = label;\par
  554                 i_aux = i;\par
  555                 j_aux = j;\par
  556             \}\par
  557             {\cf19 while} (!coord_stack.empty()) \{\par
  558                 i_aux = coord_stack.top()[0];\par
  559                 j_aux = coord_stack.top()[1];\par
  560                 coord_stack.pop();\par
  561                 {\cf19 if} (i_aux-1 >= 0 && dataset[i_aux-1][j_aux] == 1 && dataset_visited[i_aux-1][j_aux] == 0) \{\par
  562                     {\cf18 int} *coord;\par
  563                     coord = {\cf17 new} {\cf18 int}[2];\par
  564                     coord[0] = i_aux-1;\par
  565                     coord[1] = j_aux;\par
  566                     coord_stack.push(coord);\par
  567                     dataset_temp[coord_stack.top()[0]][coord_stack.top()[1]] = label;\par
  568                     dataset_visited[coord_stack.top()[0]][coord_stack.top()[1]] = 1;\par
  569                 \}\par
  570                 {\cf19 if} (i_aux+1 < image_height && dataset[i_aux+1][j_aux] == 1 && dataset_visited[i_aux+1][j_aux] == 0) \{\par
  571                     {\cf18 int} *coord;\par
  572                     coord = {\cf17 new} {\cf18 int}[2];\par
  573                     coord[0] = i_aux+1;\par
  574                     coord[1] = j_aux;\par
  575                     coord_stack.push(coord);\par
  576                     dataset_temp[coord_stack.top()[0]][coord_stack.top()[1]] = label;\par
  577                     dataset_visited[coord_stack.top()[0]][coord_stack.top()[1]] = 1;\par
  578                 \}\par
  579                 {\cf19 if} (j_aux-1 >= 0 && dataset[i_aux][j_aux-1] == 1 && dataset_visited[i_aux][j_aux-1] == 0) \{\par
  580                     {\cf18 int} *coord;\par
  581                     coord = {\cf17 new} {\cf18 int}[2];\par
  582                     coord[0] = i_aux;\par
  583                     coord[1] = j_aux-1;\par
  584                     coord_stack.push(coord);\par
  585                     dataset_temp[coord_stack.top()[0]][coord_stack.top()[1]] = label;\par
  586                     dataset_visited[coord_stack.top()[0]][coord_stack.top()[1]] = 1;\par
  587                 \}\par
  588                 {\cf19 if} (j_aux+1 < image_width && dataset[i_aux][j_aux+1] == 1 && dataset_visited[i_aux][j_aux+1] == 0) \{\par
  589                     {\cf18 int} *coord;\par
  590                     coord = {\cf17 new} {\cf18 int}[2];\par
  591                     coord[0] = i_aux;\par
  592                     coord[1] = j_aux+1;\par
  593                     coord_stack.push(coord);\par
  594                     dataset_temp[coord_stack.top()[0]][coord_stack.top()[1]] = label;\par
  595                     dataset_visited[coord_stack.top()[0]][coord_stack.top()[1]] = 1;\par
  596                 \}\par
  597                 {\cf19 if} (coord_stack.empty()) \{\par
  598                     label++;\par
  599                 \}\par
  600             \}\par
  601         \}\par
  602     \}\par
  603     {\cf19 return} label-1;\par
  604 \}\par
  605 \par
  606 {\cf18 int} main() \{\par
  607 \par
  608     {\cf18 char} xmlfilename[100];\par
  609     std::cin >> xmlfilename;\par
  610     ifstream inFile;\par
  611     inFile.open(xmlfilename);\par
  612 \par
  613     {\cf18 size_t} line_counter = 0;\par
  614     {\cf18 string} tag = {\cf22 ""};\par
  615     {\cf18 string} line = {\cf22 ""};\par
  616     {\cf18 string} image_name = {\cf22 ""};\par
  617     {\cf18 size_t} image_width = 0;\par
  618     {\cf18 size_t} image_height = 0;\par
  619     {\cf18 string} image_data = {\cf22 ""};\par
  620 \par
  621     {\cf19 while} (inFile) \{\par
  622         inFile >> line;\par
  623         line_counter++;\par
  624     \}\par
  625     inFile.close();\par
  626     inFile.clear();\par
  627     {\cf18 size_t} imgTagCount = getImgTagCount(xmlfilename);\par
  628 \par
  629     {\cf19 for} ({\cf18 size_t} i = 1; i <= imgTagCount; i++) \{\par
  630       {\cf18 bool} error = {\cf17 false};\par
  631       error = doFirstPart(xmlfilename, line_counter);\par
  632       {\cf19 if} (!error) \{\par
  633         {\cf18 string} image = getImage(xmlfilename, i);\par
  634 \par
  635         image_name = getName(image);\par
  636         image_height = getHeight(image);\par
  637         image_width =  getWidth(image);\par
  638         image_data = getData(image);\par
  639 \par
  640         cout << image_name << {\cf22 " "} << doSecondPart(xmlfilename, image) << endl;\par
  641       \} {\cf19 else}\{\par
  642         cout << {\cf22 "error"} << endl;\par
  643         {\cf19 break};\par
  644       \}\par
  645     \}\par
  646 \}\par
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \'CDndice\par 
\pard\plain 
{\tc \v \'CDndice}
{\field\fldedit {\*\fldinst INDEX \\c2 \\*MERGEFORMAT}{\fldrslt INDEX}}
}