#include <iostream>
#include <fstream>
#include <list>

using namespace std;

class Trie {
 public:
    //! Inserts a word into the Trie
    void insert(string word) {
        Node *current = root;
        for (int i = 0; i < word.length(); i++) {
            int index = word[i] - 'a';
            if (!current -> children[index]) {  // If not null?
                current -> children[index] = new Node;
            }
            current = current -> children[index];
        }
        // Here we'll have to calculate position and length of variable current
        // current -> position = getPosition
        
    }
    
    
 private:
    struct Node {
        Node *children[26];
        unsigned long position {0};
        unsigned long length {0};  // If bigger than 0, then is last character of a word
    };
    
    Node *root;
    
};


//! Returns the dictionary word without brackets
/*!
  \return the dictionary word
 */
string get_dic_word(string word) {
    string dic_word = "";
    char character = '[';
    int i = 0;
    
    while (true) {
        i ++;
        character = word[i];
        if (character == ']') {
            return dic_word;
        }
        dic_word += character;
    }
}

int main() {

    string filename, word;
    cin >> filename;
    ifstream inFile;
    inFile.open(filename);
    unsigned long length = 0;
    
    list<string> dic_words_list;
    list<unsigned long> positions;
    list<unsigned long> lenghts;
    
    cout << filename;
    cout << endl;

    while (inFile) { // While file still have lines to read
        inFile >> word;
        string dic_word = "";
        length ++;
        for (size_t character = 0; character < word.length(); character++) {
            length ++;
            if (word[character] == '[') {
                cout << length;
                dic_words_list.append(get_dic_word(word));
            }
            cout << word << endl;
        }
    }

}